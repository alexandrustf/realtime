"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FileMetadataDynamoDB_1 = require("./services/FileMetadataDynamoDB");
const USER_SUBSCRIPTION_TABLE_NAME = process.env.USER_SUBSCRIPTION_TABLE_NAME || '';
const USER_ID_SUBSCRIPTION_INDEX_NAME = process.env.USER_ID_SUBSCRIPTION_INDEX_NAME || 'UserIdSubscriptionIndex';
const dbService = new FileMetadataDynamoDB_1.FileMetadataDynamoDB(USER_SUBSCRIPTION_TABLE_NAME);
exports.handler = async (event) => {
    try {
        for (const record of event.Records) {
            if (record.eventName === 'INSERT') { // Only process new files
                const fileId = record.dynamodb.NewImage.fileId.S;
                const result = await dbService.query('fileId = :fileId', {
                    ':fileId': fileId
                }, USER_ID_SUBSCRIPTION_INDEX_NAME);
                if (result.Items)
                    await notifyUsers(result.Items, fileId);
            }
        }
    }
    catch (error) {
        console.error('Error processing DynamoDB stream event:', error);
        throw error;
    }
};
async function notifyUsers(users, fileId) {
    console.log({ users });
    for (const user of users) {
        console.log(`Notify user ${user.userId} about new file ${fileId}`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZ5VXNlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9mdW5jdGlvbnMvbm90aWZ5VXNlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwRUFBdUU7QUFFdkUsTUFBTSw0QkFBNEIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixJQUFJLEVBQUUsQ0FBQztBQUNwRixNQUFNLCtCQUErQixHQUFXLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0JBQStCLElBQUkseUJBQXlCLENBQUM7QUFDekgsTUFBTSxTQUFTLEdBQUcsSUFBSSwyQ0FBb0IsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBRXpFLE9BQU8sQ0FBQyxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO0lBQzlCLElBQUk7UUFDQSxLQUFLLE1BQU0sTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7WUFDaEMsSUFBSSxNQUFNLENBQUMsU0FBUyxLQUFLLFFBQVEsRUFBRSxFQUFFLHlCQUF5QjtnQkFDMUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFFakQsTUFBTSxNQUFNLEdBQVEsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFDLGtCQUFrQixFQUFFO29CQUMxRCxTQUFTLEVBQUUsTUFBTTtpQkFDaEIsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO2dCQUN4QyxJQUFHLE1BQU0sQ0FBQyxLQUFLO29CQUNYLE1BQU0sV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDL0M7U0FDSjtLQUNKO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDWixPQUFPLENBQUMsS0FBSyxDQUFDLHlDQUF5QyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sS0FBSyxDQUFDO0tBQ2Y7QUFDTCxDQUFDLENBQUM7QUFFRixLQUFLLFVBQVUsV0FBVyxDQUFDLEtBQUssRUFBRSxNQUFNO0lBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFDO0lBQ3JCLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1FBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxJQUFJLENBQUMsTUFBTSxtQkFBbUIsTUFBTSxFQUFFLENBQUMsQ0FBQztLQUN0RTtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWxlTWV0YWRhdGFEeW5hbW9EQiB9IGZyb20gXCIuL3NlcnZpY2VzL0ZpbGVNZXRhZGF0YUR5bmFtb0RCXCI7XHJcblxyXG5jb25zdCBVU0VSX1NVQlNDUklQVElPTl9UQUJMRV9OQU1FID0gcHJvY2Vzcy5lbnYuVVNFUl9TVUJTQ1JJUFRJT05fVEFCTEVfTkFNRSB8fCAnJztcclxuY29uc3QgVVNFUl9JRF9TVUJTQ1JJUFRJT05fSU5ERVhfTkFNRTogc3RyaW5nID0gcHJvY2Vzcy5lbnYuVVNFUl9JRF9TVUJTQ1JJUFRJT05fSU5ERVhfTkFNRSB8fCAnVXNlcklkU3Vic2NyaXB0aW9uSW5kZXgnO1xyXG5jb25zdCBkYlNlcnZpY2UgPSBuZXcgRmlsZU1ldGFkYXRhRHluYW1vREIoVVNFUl9TVUJTQ1JJUFRJT05fVEFCTEVfTkFNRSk7XHJcblxyXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZm9yIChjb25zdCByZWNvcmQgb2YgZXZlbnQuUmVjb3Jkcykge1xyXG4gICAgICAgICAgICBpZiAocmVjb3JkLmV2ZW50TmFtZSA9PT0gJ0lOU0VSVCcpIHsgLy8gT25seSBwcm9jZXNzIG5ldyBmaWxlc1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZUlkID0gcmVjb3JkLmR5bmFtb2RiLk5ld0ltYWdlLmZpbGVJZC5TO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogYW55ID0gYXdhaXQgZGJTZXJ2aWNlLnF1ZXJ5KCdmaWxlSWQgPSA6ZmlsZUlkJywge1xyXG4gICAgICAgICAgICAgICAgICAgICc6ZmlsZUlkJzogZmlsZUlkXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgVVNFUl9JRF9TVUJTQ1JJUFRJT05fSU5ERVhfTkFNRSk7XHJcbiAgICAgICAgICAgICAgICBpZihyZXN1bHQuSXRlbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgbm90aWZ5VXNlcnMocmVzdWx0Lkl0ZW1zLCBmaWxlSWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcm9jZXNzaW5nIER5bmFtb0RCIHN0cmVhbSBldmVudDonLCBlcnJvcik7XHJcbiAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICB9XHJcbn07XHJcblxyXG5hc3luYyBmdW5jdGlvbiBub3RpZnlVc2Vycyh1c2VycywgZmlsZUlkKSB7XHJcbiAgICBjb25zb2xlLmxvZyh7dXNlcnN9KTtcclxuICAgIGZvciAoY29uc3QgdXNlciBvZiB1c2Vycykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBOb3RpZnkgdXNlciAke3VzZXIudXNlcklkfSBhYm91dCBuZXcgZmlsZSAke2ZpbGVJZH1gKTtcclxuICAgIH1cclxufVxyXG4iXX0=