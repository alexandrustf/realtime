"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FileMetadataDynamoDB_1 = require("./services/FileMetadataDynamoDB");
const UserSubscribedDynamoDB_1 = require("./services/UserSubscribedDynamoDB");
const runtypes_1 = require("runtypes");
const fileMetadataTableName = process.env.FILE_METADATA_TABLE_NAME || '';
const userSubscriptionTableName = process.env.USER_SUBSCRIPTION_TABLE_NAME || '';
const fileDbService = new FileMetadataDynamoDB_1.FileMetadataDynamoDB(fileMetadataTableName);
const userDbService = new UserSubscribedDynamoDB_1.UserSubscribedDynamoDB(userSubscriptionTableName);
const ItemRuntype = (0, runtypes_1.Record)({
    fileId: runtypes_1.String,
    userId: runtypes_1.String,
    data: runtypes_1.String,
});
exports.handler = async (event) => {
    const { body } = event;
    const item = JSON.parse(body);
    if (!ItemRuntype.guard(item)) {
        return {
            statusCode: 400,
            body: "Invalid data format. The required fields are: fileId(String), userId(String), data(String)"
        };
    }
    try {
        await fileDbService.putItem({
            fileId: item.fileId,
            version: 0,
            userId: item.userId,
            data: item.data
        });
        await userDbService.putItem({
            userId: item.userId,
            fileId: item.fileId
        });
        return {
            statusCode: 200,
            body: "Data inserted successfully"
        };
    }
    catch (err) {
        console.error("Error inserting data:", err);
        return {
            statusCode: 500,
            body: "Failed to insert data"
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zZXJ0LWZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9mdW5jdGlvbnMvaW5zZXJ0LWZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwRUFBdUU7QUFDdkUsOEVBQTJFO0FBQzNFLHVDQUEwQztBQUUxQyxNQUFNLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLElBQUksRUFBRSxDQUFDO0FBQ3pFLE1BQU0seUJBQXlCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsSUFBSSxFQUFFLENBQUM7QUFFakYsTUFBTSxhQUFhLEdBQUcsSUFBSSwyQ0FBb0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3RFLE1BQU0sYUFBYSxHQUFHLElBQUksK0NBQXNCLENBQUMseUJBQXlCLENBQUMsQ0FBQztBQUU1RSxNQUFNLFdBQVcsR0FBRyxJQUFBLGlCQUFNLEVBQUM7SUFDdkIsTUFBTSxFQUFFLGlCQUFNO0lBQ2QsTUFBTSxFQUFFLGlCQUFNO0lBQ2QsSUFBSSxFQUFFLGlCQUFNO0NBQ2YsQ0FBQyxDQUFDO0FBRUgsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBVSxFQUFFLEVBQUU7SUFDbkMsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQztJQUN2QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTlCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzFCLE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSw0RkFBNEY7U0FDckcsQ0FBQztLQUNMO0lBRUQsSUFBSTtRQUNBLE1BQU0sYUFBYSxDQUFDLE9BQU8sQ0FBQztZQUN4QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsT0FBTyxFQUFFLENBQUM7WUFDVixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQ2xCLENBQUMsQ0FBQztRQUVILE1BQU0sYUFBYSxDQUFDLE9BQU8sQ0FBQztZQUN4QixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1NBQ3RCLENBQUMsQ0FBQztRQUVILE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSw0QkFBNEI7U0FDckMsQ0FBQztLQUNMO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLHVCQUF1QixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSx1QkFBdUI7U0FDaEMsQ0FBQztLQUNMO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsZU1ldGFkYXRhRHluYW1vREIgfSBmcm9tICcuL3NlcnZpY2VzL0ZpbGVNZXRhZGF0YUR5bmFtb0RCJztcclxuaW1wb3J0IHsgVXNlclN1YnNjcmliZWREeW5hbW9EQiB9IGZyb20gJy4vc2VydmljZXMvVXNlclN1YnNjcmliZWREeW5hbW9EQic7XHJcbmltcG9ydCB7IFJlY29yZCwgU3RyaW5nIH0gZnJvbSAncnVudHlwZXMnO1xyXG5cclxuY29uc3QgZmlsZU1ldGFkYXRhVGFibGVOYW1lID0gcHJvY2Vzcy5lbnYuRklMRV9NRVRBREFUQV9UQUJMRV9OQU1FIHx8ICcnO1xyXG5jb25zdCB1c2VyU3Vic2NyaXB0aW9uVGFibGVOYW1lID0gcHJvY2Vzcy5lbnYuVVNFUl9TVUJTQ1JJUFRJT05fVEFCTEVfTkFNRSB8fCAnJztcclxuXHJcbmNvbnN0IGZpbGVEYlNlcnZpY2UgPSBuZXcgRmlsZU1ldGFkYXRhRHluYW1vREIoZmlsZU1ldGFkYXRhVGFibGVOYW1lKTtcclxuY29uc3QgdXNlckRiU2VydmljZSA9IG5ldyBVc2VyU3Vic2NyaWJlZER5bmFtb0RCKHVzZXJTdWJzY3JpcHRpb25UYWJsZU5hbWUpO1xyXG5cclxuY29uc3QgSXRlbVJ1bnR5cGUgPSBSZWNvcmQoe1xyXG4gICAgZmlsZUlkOiBTdHJpbmcsXHJcbiAgICB1c2VySWQ6IFN0cmluZyxcclxuICAgIGRhdGE6IFN0cmluZyxcclxufSk7XHJcblxyXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgY29uc3QgeyBib2R5IH0gPSBldmVudDtcclxuICAgIGNvbnN0IGl0ZW0gPSBKU09OLnBhcnNlKGJvZHkpO1xyXG5cclxuICAgIGlmICghSXRlbVJ1bnR5cGUuZ3VhcmQoaXRlbSkpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXHJcbiAgICAgICAgICAgIGJvZHk6IFwiSW52YWxpZCBkYXRhIGZvcm1hdC4gVGhlIHJlcXVpcmVkIGZpZWxkcyBhcmU6IGZpbGVJZChTdHJpbmcpLCB1c2VySWQoU3RyaW5nKSwgZGF0YShTdHJpbmcpXCJcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgZmlsZURiU2VydmljZS5wdXRJdGVtKHtcclxuICAgICAgICAgICAgZmlsZUlkOiBpdGVtLmZpbGVJZCxcclxuICAgICAgICAgICAgdmVyc2lvbjogMCxcclxuICAgICAgICAgICAgdXNlcklkOiBpdGVtLnVzZXJJZCwgLy8gRXh0cmFjdCB1c2VySWQgZnJvbSB0aGUgcmVxdWVzdCAodGhpcyBjb3VsZCBiZSBmcm9tIGEgSldUIHRva2VuLCBDb2duaXRvLCBldGMuKSAgSGVyZSdzIGEgcGxhY2Vob2xkZXIgYXNzdW1pbmcgaXQncyBpbiB0aGUgcmVxdWVzdCBib2R5IGZvciBzaW1wbGljaXR5XHJcbiAgICAgICAgICAgIGRhdGE6IGl0ZW0uZGF0YVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhd2FpdCB1c2VyRGJTZXJ2aWNlLnB1dEl0ZW0oe1xyXG4gICAgICAgICAgICB1c2VySWQ6IGl0ZW0udXNlcklkLFxyXG4gICAgICAgICAgICBmaWxlSWQ6IGl0ZW0uZmlsZUlkXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgICAgICAgYm9keTogXCJEYXRhIGluc2VydGVkIHN1Y2Nlc3NmdWxseVwiXHJcbiAgICAgICAgfTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbnNlcnRpbmcgZGF0YTpcIiwgZXJyKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXHJcbiAgICAgICAgICAgIGJvZHk6IFwiRmFpbGVkIHRvIGluc2VydCBkYXRhXCJcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59O1xyXG4iXX0=