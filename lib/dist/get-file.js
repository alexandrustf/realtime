"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FileMetadataDynamoDB_1 = require("./services/FileMetadataDynamoDB");
const fileMetadataTableName = process.env.FILE_METADATA_TABLE_NAME || '';
const dbService = new FileMetadataDynamoDB_1.FileMetadataDynamoDB(fileMetadataTableName);
exports.handler = async (event) => {
    const { fileId } = event.pathParameters;
    const version = event.pathParameters.version ? parseInt(event.pathParameters.version) : null;
    if (version && isNaN(version)) {
        return {
            statusCode: 400,
            body: "Invalid version provided"
        };
    }
    try {
        let items;
        if (version) {
            items = await dbService.getItemsWithVersionGreaterThan(fileId, version);
            if (!items || items.length === 0) {
                return {
                    statusCode: 404,
                    body: "No newer versions found"
                };
            }
        }
        else {
            items = await dbService.query("fileId = :fileId", { ":fileId": { S: fileId } });
        }
        const concatenatedData = items.reduce((acc, item) => acc + item.data, "");
        const responseItem = {
            fileId: fileId,
            data: concatenatedData
        };
        return {
            statusCode: 200,
            body: JSON.stringify(responseItem)
        };
    }
    catch (err) {
        console.error("Error fetching file:", err);
        return {
            statusCode: 500,
            body: "Failed to fetch file"
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9mdW5jdGlvbnMvZ2V0LWZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwRUFBdUU7QUFFdkUsTUFBTSxxQkFBcUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixJQUFJLEVBQUUsQ0FBQztBQUN6RSxNQUFNLFNBQVMsR0FBRyxJQUFJLDJDQUFvQixDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFFbEUsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBVSxFQUFFLEVBQUU7SUFDbkMsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7SUFDeEMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFFN0YsSUFBSSxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQzNCLE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSwwQkFBMEI7U0FDbkMsQ0FBQztLQUNMO0lBRUQsSUFBSTtRQUNBLElBQUksS0FBSyxDQUFDO1FBQ1YsSUFBSSxPQUFPLEVBQUU7WUFDVCxLQUFLLEdBQUcsTUFBTSxTQUFTLENBQUMsOEJBQThCLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3hFLElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQzlCLE9BQU87b0JBQ0gsVUFBVSxFQUFFLEdBQUc7b0JBQ2YsSUFBSSxFQUFFLHlCQUF5QjtpQkFDbEMsQ0FBQzthQUNMO1NBQ0o7YUFBTTtZQUNILEtBQUssR0FBRyxNQUFNLFNBQVMsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ25GO1FBRUQsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFMUUsTUFBTSxZQUFZLEdBQUc7WUFDakIsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUUsZ0JBQWdCO1NBQ3pCLENBQUM7UUFFRixPQUFPO1lBQ0gsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7U0FDckMsQ0FBQztLQUNMO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLHNCQUFzQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQzNDLE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxzQkFBc0I7U0FDL0IsQ0FBQztLQUNMO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmlsZU1ldGFkYXRhRHluYW1vREIgfSBmcm9tIFwiLi9zZXJ2aWNlcy9GaWxlTWV0YWRhdGFEeW5hbW9EQlwiO1xyXG5cclxuY29uc3QgZmlsZU1ldGFkYXRhVGFibGVOYW1lID0gcHJvY2Vzcy5lbnYuRklMRV9NRVRBREFUQV9UQUJMRV9OQU1FIHx8ICcnO1xyXG5jb25zdCBkYlNlcnZpY2UgPSBuZXcgRmlsZU1ldGFkYXRhRHluYW1vREIoZmlsZU1ldGFkYXRhVGFibGVOYW1lKTtcclxuXHJcbmV4cG9ydHMuaGFuZGxlciA9IGFzeW5jIChldmVudDogYW55KSA9PiB7XHJcbiAgICBjb25zdCB7IGZpbGVJZCB9ID0gZXZlbnQucGF0aFBhcmFtZXRlcnM7XHJcbiAgICBjb25zdCB2ZXJzaW9uID0gZXZlbnQucGF0aFBhcmFtZXRlcnMudmVyc2lvbiA/IHBhcnNlSW50KGV2ZW50LnBhdGhQYXJhbWV0ZXJzLnZlcnNpb24pIDogbnVsbDtcclxuXHJcbiAgICBpZiAodmVyc2lvbiAmJiBpc05hTih2ZXJzaW9uKSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcclxuICAgICAgICAgICAgYm9keTogXCJJbnZhbGlkIHZlcnNpb24gcHJvdmlkZWRcIlxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBsZXQgaXRlbXM7XHJcbiAgICAgICAgaWYgKHZlcnNpb24pIHtcclxuICAgICAgICAgICAgaXRlbXMgPSBhd2FpdCBkYlNlcnZpY2UuZ2V0SXRlbXNXaXRoVmVyc2lvbkdyZWF0ZXJUaGFuKGZpbGVJZCwgdmVyc2lvbik7XHJcbiAgICAgICAgICAgIGlmICghaXRlbXMgfHwgaXRlbXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6IDQwNCxcclxuICAgICAgICAgICAgICAgICAgICBib2R5OiBcIk5vIG5ld2VyIHZlcnNpb25zIGZvdW5kXCJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpdGVtcyA9IGF3YWl0IGRiU2VydmljZS5xdWVyeShcImZpbGVJZCA9IDpmaWxlSWRcIiwgeyBcIjpmaWxlSWRcIjogeyBTOiBmaWxlSWQgfSB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbmNhdGVuYXRlZERhdGEgPSBpdGVtcy5yZWR1Y2UoKGFjYywgaXRlbSkgPT4gYWNjICsgaXRlbS5kYXRhLCBcIlwiKTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VJdGVtID0ge1xyXG4gICAgICAgICAgICBmaWxlSWQ6IGZpbGVJZCxcclxuICAgICAgICAgICAgZGF0YTogY29uY2F0ZW5hdGVkRGF0YVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVzcG9uc2VJdGVtKVxyXG4gICAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZmV0Y2hpbmcgZmlsZTpcIiwgZXJyKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXHJcbiAgICAgICAgICAgIGJvZHk6IFwiRmFpbGVkIHRvIGZldGNoIGZpbGVcIlxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn07XHJcbiJdfQ==