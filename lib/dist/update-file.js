"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FileMetadataDynamoDB_1 = require("./services/FileMetadataDynamoDB");
const fileMetadataTableName = process.env.FILE_METADATA_TABLE_NAME || '';
const dbService = new FileMetadataDynamoDB_1.FileMetadataDynamoDB(fileMetadataTableName);
exports.handler = async (event) => {
    const { fileId } = event.pathParameters;
    const { userId, data } = JSON.parse(event.body);
    if (!fileId || !userId || !data) {
        return {
            statusCode: 400,
            body: "Invalid request parameters"
        };
    }
    try {
        const latestItems = await dbService.query("fileId = :fileId", { ":fileId": fileId }); // might add ScanIndexForward option
        console.log(latestItems);
        const latestVersion = latestItems && latestItems.length > 0 ? Math.max(...latestItems.map(item => item.version)) : 0;
        const newItem = {
            fileId: fileId,
            version: latestVersion + 1,
            userId: userId,
            data: data
        };
        await dbService.putItem(newItem);
        return {
            statusCode: 200,
            body: "Data updated successfully"
        };
    }
    catch (err) {
        console.error("Error updating data:", err);
        return {
            statusCode: 500,
            body: "Failed to update data"
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLWZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9mdW5jdGlvbnMvdXBkYXRlLWZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwwRUFBdUU7QUFFdkUsTUFBTSxxQkFBcUIsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixJQUFJLEVBQUUsQ0FBQztBQUN6RSxNQUFNLFNBQVMsR0FBRyxJQUFJLDJDQUFvQixDQUFDLHFCQUFxQixDQUFDLENBQUM7QUFFbEUsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBVSxFQUFFLEVBQUU7SUFDbkMsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7SUFDeEMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVoRCxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQzdCLE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSw0QkFBNEI7U0FDckMsQ0FBQztLQUNMO0lBRUQsSUFBSTtRQUNBLE1BQU0sV0FBVyxHQUFHLE1BQU0sU0FBUyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsb0NBQW9DO1FBQzFILE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDeEIsTUFBTSxhQUFhLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFckgsTUFBTSxPQUFPLEdBQUc7WUFDWixNQUFNLEVBQUUsTUFBTTtZQUNkLE9BQU8sRUFBRSxhQUFhLEdBQUcsQ0FBQztZQUMxQixNQUFNLEVBQUUsTUFBTTtZQUNkLElBQUksRUFBRSxJQUFJO1NBQ2IsQ0FBQztRQUVGLE1BQU0sU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVqQyxPQUFPO1lBQ0gsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsMkJBQTJCO1NBQ3BDLENBQUM7S0FDTDtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1YsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUMzQyxPQUFPO1lBQ0gsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsdUJBQXVCO1NBQ2hDLENBQUM7S0FDTDtBQUNMLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZpbGVNZXRhZGF0YUR5bmFtb0RCIH0gZnJvbSAnLi9zZXJ2aWNlcy9GaWxlTWV0YWRhdGFEeW5hbW9EQic7XHJcblxyXG5jb25zdCBmaWxlTWV0YWRhdGFUYWJsZU5hbWUgPSBwcm9jZXNzLmVudi5GSUxFX01FVEFEQVRBX1RBQkxFX05BTUUgfHwgJyc7XHJcbmNvbnN0IGRiU2VydmljZSA9IG5ldyBGaWxlTWV0YWRhdGFEeW5hbW9EQihmaWxlTWV0YWRhdGFUYWJsZU5hbWUpO1xyXG5cclxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnkpID0+IHtcclxuICAgIGNvbnN0IHsgZmlsZUlkIH0gPSBldmVudC5wYXRoUGFyYW1ldGVycztcclxuICAgIGNvbnN0IHsgdXNlcklkLCBkYXRhIH0gPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xyXG5cclxuICAgIGlmICghZmlsZUlkIHx8ICF1c2VySWQgfHwgIWRhdGEpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA0MDAsXHJcbiAgICAgICAgICAgIGJvZHk6IFwiSW52YWxpZCByZXF1ZXN0IHBhcmFtZXRlcnNcIlxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBsYXRlc3RJdGVtcyA9IGF3YWl0IGRiU2VydmljZS5xdWVyeShcImZpbGVJZCA9IDpmaWxlSWRcIiwgeyBcIjpmaWxlSWRcIjogZmlsZUlkIH0pOyAvLyBtaWdodCBhZGQgU2NhbkluZGV4Rm9yd2FyZCBvcHRpb25cclxuICAgICAgICBjb25zb2xlLmxvZyhsYXRlc3RJdGVtcylcclxuICAgICAgICBjb25zdCBsYXRlc3RWZXJzaW9uID0gbGF0ZXN0SXRlbXMgJiYgbGF0ZXN0SXRlbXMubGVuZ3RoID4gMCA/IE1hdGgubWF4KC4uLmxhdGVzdEl0ZW1zLm1hcChpdGVtID0+IGl0ZW0udmVyc2lvbikpIDogMDsgXHJcblxyXG4gICAgICAgIGNvbnN0IG5ld0l0ZW0gPSB7XHJcbiAgICAgICAgICAgIGZpbGVJZDogZmlsZUlkLFxyXG4gICAgICAgICAgICB2ZXJzaW9uOiBsYXRlc3RWZXJzaW9uICsgMSxcclxuICAgICAgICAgICAgdXNlcklkOiB1c2VySWQsXHJcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBhd2FpdCBkYlNlcnZpY2UucHV0SXRlbShuZXdJdGVtKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxyXG4gICAgICAgICAgICBib2R5OiBcIkRhdGEgdXBkYXRlZCBzdWNjZXNzZnVsbHlcIlxyXG4gICAgICAgIH07XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgdXBkYXRpbmcgZGF0YTpcIiwgZXJyKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXHJcbiAgICAgICAgICAgIGJvZHk6IFwiRmFpbGVkIHRvIHVwZGF0ZSBkYXRhXCJcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59O1xyXG4iXX0=